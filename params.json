{"body":"# User guide - groovyrdf\r\n\r\n## General syntax\r\n\r\n    rdfBuilderInstance {\r\n      resourceUri {\r\n        a typeUri\r\n        predicateUri value\r\n        predicateUri list\r\n        predicateUri value, [lang: language]\r\n        predicateUri {\r\n          resourceUri {\r\n            // more statements if needed\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    rdfBuilderInstance: Instance of RdfBuilder\r\n    resourceUri: String that contains a URI of a resource\r\n    a: Keyword for a type property\r\n    typeUri: String that contains a URI of a type\r\n    predicateUri: String that contains a URI of a predicate\r\n    value: a String or a primitive\r\n    list: a list of values \r\n    lang: Keyword for setting a language tag\r\n    language: String containing a language tag\r\n    \r\n\r\n## Code Examples\r\n\r\n### Instantiate RdfBuilder\r\n\r\nCurrently a RdfBuilder based on the Jena-Framework is supported:\r\n\r\n    def rdfBuilder = new JenaRdfBuilder()\r\n\r\nYou may use a BuilderFactory to instantiate a RdfBuilder:\r\n\r\n    def rdfBuilder = new JenaRdfBuilderFactory().newInstance()\r\n\r\n### Build & write RdfData\r\n\r\n    def rdfBuilder = new JenaRdfBuilder()\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      // statements\r\n    }\r\n\r\nYou can export it to TURTLE like this:\r\n\r\n    rdfData.write(System.out, RdfDataFormat.TURTLE)\r\n    \r\n### Simple statement\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"http://example.com/resource/alice\" {\r\n        \"http://example.com/vocab/name\" \"Alice\"\r\n      }\r\n    }\r\n\r\nis equivalent to the following RDF in TURTLE syntax:\r\n\r\n    <http://example.com/resource/alice>\r\n      <http://example.com/vocab/name> \"Alice\".\r\n\r\n### RDF types\r\n\r\nUse the \"a\" keyword as a shortcut for the rdf:type predicate:\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"http://example.com/resource/alice\" {\r\n         a \"http://example.com/vocab/Person\"\r\n        \"http://example.com/vocab/name\" \"Alice\"\r\n      }\r\n    }\r\n\r\nis equivalent to the following RDF in TURTLE syntax:\r\n\r\n    <http://example.com/resource/alice>\r\n      a <http://example.com/vocab/Person>;\r\n      <http://example.com/vocab/name> \"Alice\".\r\n\r\n### Multiple literals\r\n\r\nJust pass a groovy list to assign multiple values:\r\n\r\n    def names = [\"Alice\", \"Julia\"]\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"http://example.com/resource/alice\" {\r\n         a \"http://example.com/vocab/Person\"\r\n        \"http://example.com/vocab/name\" names\r\n      }\r\n    }\r\n\r\nis equivalent to the following RDF in TURTLE syntax:\r\n\r\n    <http://example.com/resource/alice>\r\n      a <http://example.com/vocab/Person>;\r\n      <http://example.com/vocab/name> \"Alice\", \"Julia\".\r\n\r\n\r\n### Language tags\r\n\r\nYou can easily assign a language to a literal like this:\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"http://example.com/resource/alice\" {\r\n         a \"http://example.com/vocab/Person\"\r\n        \"http://example.com/vocab/name\" \"Alice\", [lang: \"en\"]\r\n      }\r\n    }\r\n\r\nis equivalent to the following RDF in TURTLE syntax:\r\n\r\n    <http://example.com/resource/alice>\r\n      a <http://example.com/vocab/Person>;\r\n      <http://example.com/vocab/name> \"Alice\"@en.\r\n\r\n\r\n### Nested resources\r\n\r\nOf course you can nest resources:\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"http://example.com/resource/alice\" {\r\n         a \"http://example.com/vocab/Person\"\r\n        \"http://example.com/vocab/name\" \"Alice\"\r\n        \"http://example.com/vocab/knows\" {\r\n          \"http://example.com/resource/bob\" {\r\n             a \"http://example.com/vocab/Person\"\r\n            \"http://example.com/vocab/name\" \"Bob\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\nis equivalent to the following RDF in TURTLE syntax:\r\n\r\n    <http://example.com/resource/alice>\r\n      a <http://example.com/vocab/Person>;\r\n      <http://example.com/vocab/name> \"Alice\";\r\n      <http://example.com/vocab/knows> <http://example.com/resource/bob>.\r\n      \r\n    <http://example.com/resource/bob>\r\n      a <http://example.com/vocab/Person>;\r\n      <http://example.com/vocab/name> \"Bob\".\r\n      \r\n### Using namespaces\r\n\r\nThe code will be much clearer if you use namespaces:\r\n\r\n    def vocab = new RdfNamespace(\"http://example.com/vocab/\")\r\n    \r\nAny call to a property of vocab will result in a String of the form \"http://example.com/vocab/property\"\r\n\r\n    vocab.anything == \"http://example.com/vocab/anything\"\r\n    \r\nThe \"Nested resources\" example with the help of this namespace:\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"http://example.com/resource/alice\" {\r\n         a vocab.Person\r\n        \"$vocab.name\" \"Alice\"\r\n        \"$vocab.knows\" {\r\n          \"http://example.com/resource/bob\" {\r\n             a vocab.Person\r\n            \"$vocab.name\" \"Bob\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n#### Why this strange \"$vocab.name\"-Syntax?\r\n\r\nBecause RdfBuilder actually has to call a method named \"http://example.com/vocab/name\" to build the statement.\r\nIf we just wrote vocab.name Groovy would try to call a method _on_ the resulting string instead of calling a method\r\nthat is named like the value _in_ the string. You will get used to it ;-)\r\n      \r\n### Be dynamic\r\n\r\nOf course when using a scripting language, you want to build your RDF dynamically based on some data structures.\r\nHere is an example with a Person class:\r\n\r\n    class Person {\r\n      String uri\r\n      String name\r\n      List<Person> friends\r\n    }      \r\n      \r\nThis will generate RDF data with the name of a person and all their friends:\r\n\r\n    Person person = ... // whatever you program does to set up a person\r\n    \r\n    def vocab = new RdfNamespace(\"http://example.com/vocab/\")\r\n\r\n    RdfData rdfData = rdfBuilder {\r\n      \"$person.uri\" {\r\n         a vocab.Person\r\n        \"$vocab.name\" person.name\r\n        \"$vocab.knows\" {\r\n          person.friends.each { friend ->\r\n            \"$friend.uri\" {\r\n               a vocab.Person\r\n              \"$vocab.name\" friend.name\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n### Take a look at the unit tests\r\n\r\nFor more examples a look at the groovyrdf unit tests might be helpful:\r\n\r\nhttps://github.com/angelo-v/groovyrdf/tree/master/src/test/groovy/de/datenwissen/util/groovyrdf\r\n\r\n## Final words\r\n      \r\nAnd now, be creative using groovyrdf to build your RDF data \"the groovy way\".\r\nQuestions, ideas and any feedback may be sent to angelo.veltens@online.de\r\n\r\nTo contribute to groovyrdf just fork and sent a pull request at github:\r\nhttps://github.com/angelo-v/groovyrdf","tagline":"Library for building RDF data with Groovy","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Groovyrdf"}